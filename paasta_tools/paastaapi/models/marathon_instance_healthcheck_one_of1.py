"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""
import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class MarathonInstanceHealthcheckOneOf1:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"healthcheck_cmd": "str", "healthcheck_mode": "str"}

    attribute_map = {
        "healthcheck_cmd": "healthcheck_cmd",
        "healthcheck_mode": "healthcheck_mode",
    }

    def __init__(
        self, healthcheck_cmd=None, healthcheck_mode=None, local_vars_configuration=None
    ):  # noqa: E501
        """MarathonInstanceHealthcheckOneOf1 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._healthcheck_cmd = None
        self._healthcheck_mode = None
        self.discriminator = None

        self.healthcheck_cmd = healthcheck_cmd
        if healthcheck_mode is not None:
            self.healthcheck_mode = healthcheck_mode

    @property
    def healthcheck_cmd(self):
        """Gets the healthcheck_cmd of this MarathonInstanceHealthcheckOneOf1.  # noqa: E501


        :return: The healthcheck_cmd of this MarathonInstanceHealthcheckOneOf1.  # noqa: E501
        :rtype: str
        """
        return self._healthcheck_cmd

    @healthcheck_cmd.setter
    def healthcheck_cmd(self, healthcheck_cmd):
        """Sets the healthcheck_cmd of this MarathonInstanceHealthcheckOneOf1.


        :param healthcheck_cmd: The healthcheck_cmd of this MarathonInstanceHealthcheckOneOf1.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and healthcheck_cmd is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `healthcheck_cmd`, must not be `None`"
            )  # noqa: E501

        self._healthcheck_cmd = healthcheck_cmd

    @property
    def healthcheck_mode(self):
        """Gets the healthcheck_mode of this MarathonInstanceHealthcheckOneOf1.  # noqa: E501


        :return: The healthcheck_mode of this MarathonInstanceHealthcheckOneOf1.  # noqa: E501
        :rtype: str
        """
        return self._healthcheck_mode

    @healthcheck_mode.setter
    def healthcheck_mode(self, healthcheck_mode):
        """Sets the healthcheck_mode of this MarathonInstanceHealthcheckOneOf1.


        :param healthcheck_mode: The healthcheck_mode of this MarathonInstanceHealthcheckOneOf1.  # noqa: E501
        :type: str
        """
        allowed_values = ["cmd"]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and healthcheck_mode not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `healthcheck_mode` ({}), must be one of {}".format(  # noqa: E501
                    healthcheck_mode, allowed_values
                )
            )

        self._healthcheck_mode = healthcheck_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarathonInstanceHealthcheckOneOf1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MarathonInstanceHealthcheckOneOf1):
            return True

        return self.to_dict() != other.to_dict()
