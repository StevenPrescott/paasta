"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""
import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class AdhocInstance:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "args": "list[str]",
        "cap_add": "list[str]",
        "cfs_period_us": "int",
        "cmd": "str",
        "cpu_burst_add": "float",
        "cpus": "float",
        "deploy_group": "str",
        "disk": "float",
        "env": "dict(str, str)",
        "extra_docker_args": "dict(str, str)",
        "extra_volumes": "list[object]",
        "gpus": "int",
        "mem": "float",
        "net": "str",
        "pool": "str",
        "role": "str",
    }

    attribute_map = {
        "args": "args",
        "cap_add": "cap_add",
        "cfs_period_us": "cfs_period_us",
        "cmd": "cmd",
        "cpu_burst_add": "cpu_burst_add",
        "cpus": "cpus",
        "deploy_group": "deploy_group",
        "disk": "disk",
        "env": "env",
        "extra_docker_args": "extra_docker_args",
        "extra_volumes": "extra_volumes",
        "gpus": "gpus",
        "mem": "mem",
        "net": "net",
        "pool": "pool",
        "role": "role",
    }

    def __init__(
        self,
        args=None,
        cap_add=None,
        cfs_period_us=None,
        cmd=None,
        cpu_burst_add=None,
        cpus=1,
        deploy_group=None,
        disk=1024,
        env=None,
        extra_docker_args=None,
        extra_volumes=None,
        gpus=None,
        mem=1024,
        net=None,
        pool=None,
        role=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """AdhocInstance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._args = None
        self._cap_add = None
        self._cfs_period_us = None
        self._cmd = None
        self._cpu_burst_add = None
        self._cpus = None
        self._deploy_group = None
        self._disk = None
        self._env = None
        self._extra_docker_args = None
        self._extra_volumes = None
        self._gpus = None
        self._mem = None
        self._net = None
        self._pool = None
        self._role = None
        self.discriminator = None

        if args is not None:
            self.args = args
        if cap_add is not None:
            self.cap_add = cap_add
        if cfs_period_us is not None:
            self.cfs_period_us = cfs_period_us
        if cmd is not None:
            self.cmd = cmd
        if cpu_burst_add is not None:
            self.cpu_burst_add = cpu_burst_add
        if cpus is not None:
            self.cpus = cpus
        if deploy_group is not None:
            self.deploy_group = deploy_group
        if disk is not None:
            self.disk = disk
        if env is not None:
            self.env = env
        if extra_docker_args is not None:
            self.extra_docker_args = extra_docker_args
        if extra_volumes is not None:
            self.extra_volumes = extra_volumes
        if gpus is not None:
            self.gpus = gpus
        if mem is not None:
            self.mem = mem
        if net is not None:
            self.net = net
        if pool is not None:
            self.pool = pool
        if role is not None:
            self.role = role

    @property
    def args(self):
        """Gets the args of this AdhocInstance.  # noqa: E501


        :return: The args of this AdhocInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this AdhocInstance.


        :param args: The args of this AdhocInstance.  # noqa: E501
        :type: list[str]
        """

        self._args = args

    @property
    def cap_add(self):
        """Gets the cap_add of this AdhocInstance.  # noqa: E501


        :return: The cap_add of this AdhocInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._cap_add

    @cap_add.setter
    def cap_add(self, cap_add):
        """Sets the cap_add of this AdhocInstance.


        :param cap_add: The cap_add of this AdhocInstance.  # noqa: E501
        :type: list[str]
        """

        self._cap_add = cap_add

    @property
    def cfs_period_us(self):
        """Gets the cfs_period_us of this AdhocInstance.  # noqa: E501


        :return: The cfs_period_us of this AdhocInstance.  # noqa: E501
        :rtype: int
        """
        return self._cfs_period_us

    @cfs_period_us.setter
    def cfs_period_us(self, cfs_period_us):
        """Sets the cfs_period_us of this AdhocInstance.


        :param cfs_period_us: The cfs_period_us of this AdhocInstance.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and cfs_period_us is not None
            and cfs_period_us > 1000000
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `cfs_period_us`, must be a value less than or equal to `1000000`"
            )  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and cfs_period_us is not None
            and cfs_period_us < 1000
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `cfs_period_us`, must be a value greater than or equal to `1000`"
            )  # noqa: E501

        self._cfs_period_us = cfs_period_us

    @property
    def cmd(self):
        """Gets the cmd of this AdhocInstance.  # noqa: E501


        :return: The cmd of this AdhocInstance.  # noqa: E501
        :rtype: str
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this AdhocInstance.


        :param cmd: The cmd of this AdhocInstance.  # noqa: E501
        :type: str
        """

        self._cmd = cmd

    @property
    def cpu_burst_add(self):
        """Gets the cpu_burst_add of this AdhocInstance.  # noqa: E501


        :return: The cpu_burst_add of this AdhocInstance.  # noqa: E501
        :rtype: float
        """
        return self._cpu_burst_add

    @cpu_burst_add.setter
    def cpu_burst_add(self, cpu_burst_add):
        """Sets the cpu_burst_add of this AdhocInstance.


        :param cpu_burst_add: The cpu_burst_add of this AdhocInstance.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation
            and cpu_burst_add is not None
            and cpu_burst_add < 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `cpu_burst_add`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._cpu_burst_add = cpu_burst_add

    @property
    def cpus(self):
        """Gets the cpus of this AdhocInstance.  # noqa: E501


        :return: The cpus of this AdhocInstance.  # noqa: E501
        :rtype: float
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this AdhocInstance.


        :param cpus: The cpus of this AdhocInstance.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation
            and cpus is not None
            and cpus <= 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `cpus`, must be a value greater than `0`"
            )  # noqa: E501

        self._cpus = cpus

    @property
    def deploy_group(self):
        """Gets the deploy_group of this AdhocInstance.  # noqa: E501


        :return: The deploy_group of this AdhocInstance.  # noqa: E501
        :rtype: str
        """
        return self._deploy_group

    @deploy_group.setter
    def deploy_group(self, deploy_group):
        """Sets the deploy_group of this AdhocInstance.


        :param deploy_group: The deploy_group of this AdhocInstance.  # noqa: E501
        :type: str
        """

        self._deploy_group = deploy_group

    @property
    def disk(self):
        """Gets the disk of this AdhocInstance.  # noqa: E501


        :return: The disk of this AdhocInstance.  # noqa: E501
        :rtype: float
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this AdhocInstance.


        :param disk: The disk of this AdhocInstance.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation
            and disk is not None
            and disk <= 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `disk`, must be a value greater than `0`"
            )  # noqa: E501

        self._disk = disk

    @property
    def env(self):
        """Gets the env of this AdhocInstance.  # noqa: E501


        :return: The env of this AdhocInstance.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this AdhocInstance.


        :param env: The env of this AdhocInstance.  # noqa: E501
        :type: dict(str, str)
        """

        self._env = env

    @property
    def extra_docker_args(self):
        """Gets the extra_docker_args of this AdhocInstance.  # noqa: E501


        :return: The extra_docker_args of this AdhocInstance.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extra_docker_args

    @extra_docker_args.setter
    def extra_docker_args(self, extra_docker_args):
        """Sets the extra_docker_args of this AdhocInstance.


        :param extra_docker_args: The extra_docker_args of this AdhocInstance.  # noqa: E501
        :type: dict(str, str)
        """

        self._extra_docker_args = extra_docker_args

    @property
    def extra_volumes(self):
        """Gets the extra_volumes of this AdhocInstance.  # noqa: E501


        :return: The extra_volumes of this AdhocInstance.  # noqa: E501
        :rtype: list[object]
        """
        return self._extra_volumes

    @extra_volumes.setter
    def extra_volumes(self, extra_volumes):
        """Sets the extra_volumes of this AdhocInstance.


        :param extra_volumes: The extra_volumes of this AdhocInstance.  # noqa: E501
        :type: list[object]
        """

        self._extra_volumes = extra_volumes

    @property
    def gpus(self):
        """Gets the gpus of this AdhocInstance.  # noqa: E501


        :return: The gpus of this AdhocInstance.  # noqa: E501
        :rtype: int
        """
        return self._gpus

    @gpus.setter
    def gpus(self, gpus):
        """Sets the gpus of this AdhocInstance.


        :param gpus: The gpus of this AdhocInstance.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and gpus is not None
            and gpus < 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `gpus`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._gpus = gpus

    @property
    def mem(self):
        """Gets the mem of this AdhocInstance.  # noqa: E501


        :return: The mem of this AdhocInstance.  # noqa: E501
        :rtype: float
        """
        return self._mem

    @mem.setter
    def mem(self, mem):
        """Sets the mem of this AdhocInstance.


        :param mem: The mem of this AdhocInstance.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation
            and mem is not None
            and mem <= 32
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `mem`, must be a value greater than `32`"
            )  # noqa: E501

        self._mem = mem

    @property
    def net(self):
        """Gets the net of this AdhocInstance.  # noqa: E501


        :return: The net of this AdhocInstance.  # noqa: E501
        :rtype: str
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this AdhocInstance.


        :param net: The net of this AdhocInstance.  # noqa: E501
        :type: str
        """

        self._net = net

    @property
    def pool(self):
        """Gets the pool of this AdhocInstance.  # noqa: E501


        :return: The pool of this AdhocInstance.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this AdhocInstance.


        :param pool: The pool of this AdhocInstance.  # noqa: E501
        :type: str
        """

        self._pool = pool

    @property
    def role(self):
        """Gets the role of this AdhocInstance.  # noqa: E501


        :return: The role of this AdhocInstance.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AdhocInstance.


        :param role: The role of this AdhocInstance.  # noqa: E501
        :type: str
        """

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdhocInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdhocInstance):
            return True

        return self.to_dict() != other.to_dict()
