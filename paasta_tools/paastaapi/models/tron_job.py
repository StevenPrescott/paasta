"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""
import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class TronJob:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "actions": "AnyOfarraymap",
        "all_nodes": "bool",
        "allow_overlap": "bool",
        "cleanup_action": "TronAction",
        "cluster": "str",
        "deploy_group": "str",
        "enabled": "bool",
        "expected_runtime": "str",
        "max_runtime": "str",
        "monitoring": "TronJobMonitoring",
        "name": "str",
        "node": "str",
        "queueing": "bool",
        "run_limit": "int",
        "schedule": "AnyOfstringobject",
        "service": "str",
        "time_zone": "str",
    }

    attribute_map = {
        "actions": "actions",
        "all_nodes": "all_nodes",
        "allow_overlap": "allow_overlap",
        "cleanup_action": "cleanup_action",
        "cluster": "cluster",
        "deploy_group": "deploy_group",
        "enabled": "enabled",
        "expected_runtime": "expected_runtime",
        "max_runtime": "max_runtime",
        "monitoring": "monitoring",
        "name": "name",
        "node": "node",
        "queueing": "queueing",
        "run_limit": "run_limit",
        "schedule": "schedule",
        "service": "service",
        "time_zone": "time_zone",
    }

    def __init__(
        self,
        actions=None,
        all_nodes=None,
        allow_overlap=None,
        cleanup_action=None,
        cluster=None,
        deploy_group=None,
        enabled=None,
        expected_runtime=None,
        max_runtime=None,
        monitoring=None,
        name=None,
        node=None,
        queueing=None,
        run_limit=None,
        schedule=None,
        service=None,
        time_zone=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """TronJob - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._actions = None
        self._all_nodes = None
        self._allow_overlap = None
        self._cleanup_action = None
        self._cluster = None
        self._deploy_group = None
        self._enabled = None
        self._expected_runtime = None
        self._max_runtime = None
        self._monitoring = None
        self._name = None
        self._node = None
        self._queueing = None
        self._run_limit = None
        self._schedule = None
        self._service = None
        self._time_zone = None
        self.discriminator = None

        self.actions = actions
        if all_nodes is not None:
            self.all_nodes = all_nodes
        if allow_overlap is not None:
            self.allow_overlap = allow_overlap
        if cleanup_action is not None:
            self.cleanup_action = cleanup_action
        if cluster is not None:
            self.cluster = cluster
        if deploy_group is not None:
            self.deploy_group = deploy_group
        if enabled is not None:
            self.enabled = enabled
        if expected_runtime is not None:
            self.expected_runtime = expected_runtime
        if max_runtime is not None:
            self.max_runtime = max_runtime
        if monitoring is not None:
            self.monitoring = monitoring
        if name is not None:
            self.name = name
        if node is not None:
            self.node = node
        if queueing is not None:
            self.queueing = queueing
        if run_limit is not None:
            self.run_limit = run_limit
        self.schedule = schedule
        if service is not None:
            self.service = service
        if time_zone is not None:
            self.time_zone = time_zone

    @property
    def actions(self):
        """Gets the actions of this TronJob.  # noqa: E501


        :return: The actions of this TronJob.  # noqa: E501
        :rtype: AnyOfarraymap
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this TronJob.


        :param actions: The actions of this TronJob.  # noqa: E501
        :type: AnyOfarraymap
        """
        if (
            self.local_vars_configuration.client_side_validation and actions is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `actions`, must not be `None`"
            )  # noqa: E501

        self._actions = actions

    @property
    def all_nodes(self):
        """Gets the all_nodes of this TronJob.  # noqa: E501


        :return: The all_nodes of this TronJob.  # noqa: E501
        :rtype: bool
        """
        return self._all_nodes

    @all_nodes.setter
    def all_nodes(self, all_nodes):
        """Sets the all_nodes of this TronJob.


        :param all_nodes: The all_nodes of this TronJob.  # noqa: E501
        :type: bool
        """

        self._all_nodes = all_nodes

    @property
    def allow_overlap(self):
        """Gets the allow_overlap of this TronJob.  # noqa: E501


        :return: The allow_overlap of this TronJob.  # noqa: E501
        :rtype: bool
        """
        return self._allow_overlap

    @allow_overlap.setter
    def allow_overlap(self, allow_overlap):
        """Sets the allow_overlap of this TronJob.


        :param allow_overlap: The allow_overlap of this TronJob.  # noqa: E501
        :type: bool
        """

        self._allow_overlap = allow_overlap

    @property
    def cleanup_action(self):
        """Gets the cleanup_action of this TronJob.  # noqa: E501


        :return: The cleanup_action of this TronJob.  # noqa: E501
        :rtype: TronAction
        """
        return self._cleanup_action

    @cleanup_action.setter
    def cleanup_action(self, cleanup_action):
        """Sets the cleanup_action of this TronJob.


        :param cleanup_action: The cleanup_action of this TronJob.  # noqa: E501
        :type: TronAction
        """

        self._cleanup_action = cleanup_action

    @property
    def cluster(self):
        """Gets the cluster of this TronJob.  # noqa: E501


        :return: The cluster of this TronJob.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this TronJob.


        :param cluster: The cluster of this TronJob.  # noqa: E501
        :type: str
        """

        self._cluster = cluster

    @property
    def deploy_group(self):
        """Gets the deploy_group of this TronJob.  # noqa: E501


        :return: The deploy_group of this TronJob.  # noqa: E501
        :rtype: str
        """
        return self._deploy_group

    @deploy_group.setter
    def deploy_group(self, deploy_group):
        """Sets the deploy_group of this TronJob.


        :param deploy_group: The deploy_group of this TronJob.  # noqa: E501
        :type: str
        """

        self._deploy_group = deploy_group

    @property
    def enabled(self):
        """Gets the enabled of this TronJob.  # noqa: E501


        :return: The enabled of this TronJob.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this TronJob.


        :param enabled: The enabled of this TronJob.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def expected_runtime(self):
        """Gets the expected_runtime of this TronJob.  # noqa: E501


        :return: The expected_runtime of this TronJob.  # noqa: E501
        :rtype: str
        """
        return self._expected_runtime

    @expected_runtime.setter
    def expected_runtime(self, expected_runtime):
        """Sets the expected_runtime of this TronJob.


        :param expected_runtime: The expected_runtime of this TronJob.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and expected_runtime is not None
            and not re.search(r"^\d+\s*[a-z]+$", expected_runtime)
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `expected_runtime`, must be a follow pattern or equal to `/^\d+\s*[a-z]+$/`"
            )  # noqa: E501

        self._expected_runtime = expected_runtime

    @property
    def max_runtime(self):
        """Gets the max_runtime of this TronJob.  # noqa: E501


        :return: The max_runtime of this TronJob.  # noqa: E501
        :rtype: str
        """
        return self._max_runtime

    @max_runtime.setter
    def max_runtime(self, max_runtime):
        """Sets the max_runtime of this TronJob.


        :param max_runtime: The max_runtime of this TronJob.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and max_runtime is not None
            and not re.search(r"^\d+\s*[a-z]+$", max_runtime)
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `max_runtime`, must be a follow pattern or equal to `/^\d+\s*[a-z]+$/`"
            )  # noqa: E501

        self._max_runtime = max_runtime

    @property
    def monitoring(self):
        """Gets the monitoring of this TronJob.  # noqa: E501


        :return: The monitoring of this TronJob.  # noqa: E501
        :rtype: TronJobMonitoring
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring):
        """Sets the monitoring of this TronJob.


        :param monitoring: The monitoring of this TronJob.  # noqa: E501
        :type: TronJobMonitoring
        """

        self._monitoring = monitoring

    @property
    def name(self):
        """Gets the name of this TronJob.  # noqa: E501


        :return: The name of this TronJob.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TronJob.


        :param name: The name of this TronJob.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and name is not None
            and not re.search(r"^[A-Za-z_][\w\-]{0,254}$", name)
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z_][\w\-]{0,254}$/`"
            )  # noqa: E501

        self._name = name

    @property
    def node(self):
        """Gets the node of this TronJob.  # noqa: E501


        :return: The node of this TronJob.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this TronJob.


        :param node: The node of this TronJob.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and node is not None
            and not re.search(r"^[A-Za-z_][\w\-]{0,254}$", node)
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `node`, must be a follow pattern or equal to `/^[A-Za-z_][\w\-]{0,254}$/`"
            )  # noqa: E501

        self._node = node

    @property
    def queueing(self):
        """Gets the queueing of this TronJob.  # noqa: E501


        :return: The queueing of this TronJob.  # noqa: E501
        :rtype: bool
        """
        return self._queueing

    @queueing.setter
    def queueing(self, queueing):
        """Sets the queueing of this TronJob.


        :param queueing: The queueing of this TronJob.  # noqa: E501
        :type: bool
        """

        self._queueing = queueing

    @property
    def run_limit(self):
        """Gets the run_limit of this TronJob.  # noqa: E501


        :return: The run_limit of this TronJob.  # noqa: E501
        :rtype: int
        """
        return self._run_limit

    @run_limit.setter
    def run_limit(self, run_limit):
        """Sets the run_limit of this TronJob.


        :param run_limit: The run_limit of this TronJob.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and run_limit is not None
            and run_limit <= 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `run_limit`, must be a value greater than `0`"
            )  # noqa: E501

        self._run_limit = run_limit

    @property
    def schedule(self):
        """Gets the schedule of this TronJob.  # noqa: E501


        :return: The schedule of this TronJob.  # noqa: E501
        :rtype: AnyOfstringobject
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this TronJob.


        :param schedule: The schedule of this TronJob.  # noqa: E501
        :type: AnyOfstringobject
        """
        if (
            self.local_vars_configuration.client_side_validation and schedule is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `schedule`, must not be `None`"
            )  # noqa: E501

        self._schedule = schedule

    @property
    def service(self):
        """Gets the service of this TronJob.  # noqa: E501


        :return: The service of this TronJob.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this TronJob.


        :param service: The service of this TronJob.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def time_zone(self):
        """Gets the time_zone of this TronJob.  # noqa: E501


        :return: The time_zone of this TronJob.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this TronJob.


        :param time_zone: The time_zone of this TronJob.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TronJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TronJob):
            return True

        return self.to_dict() != other.to_dict()
