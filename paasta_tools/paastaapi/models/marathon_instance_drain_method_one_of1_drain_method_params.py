"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""
import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class MarathonInstanceDrainMethodOneOf1DrainMethodParams:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "drain": "object",
        "is_draining": "object",
        "is_safe_to_kill": "object",
        "stop_draining": "object",
    }

    attribute_map = {
        "drain": "drain",
        "is_draining": "is_draining",
        "is_safe_to_kill": "is_safe_to_kill",
        "stop_draining": "stop_draining",
    }

    def __init__(
        self,
        drain=None,
        is_draining=None,
        is_safe_to_kill=None,
        stop_draining=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """MarathonInstanceDrainMethodOneOf1DrainMethodParams - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._drain = None
        self._is_draining = None
        self._is_safe_to_kill = None
        self._stop_draining = None
        self.discriminator = None

        self.drain = drain
        self.is_draining = is_draining
        self.is_safe_to_kill = is_safe_to_kill
        self.stop_draining = stop_draining

    @property
    def drain(self):
        """Gets the drain of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.  # noqa: E501


        :return: The drain of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.  # noqa: E501
        :rtype: object
        """
        return self._drain

    @drain.setter
    def drain(self, drain):
        """Sets the drain of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.


        :param drain: The drain of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.  # noqa: E501
        :type: object
        """
        if (
            self.local_vars_configuration.client_side_validation and drain is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `drain`, must not be `None`"
            )  # noqa: E501

        self._drain = drain

    @property
    def is_draining(self):
        """Gets the is_draining of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.  # noqa: E501


        :return: The is_draining of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.  # noqa: E501
        :rtype: object
        """
        return self._is_draining

    @is_draining.setter
    def is_draining(self, is_draining):
        """Sets the is_draining of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.


        :param is_draining: The is_draining of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.  # noqa: E501
        :type: object
        """
        if (
            self.local_vars_configuration.client_side_validation and is_draining is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_draining`, must not be `None`"
            )  # noqa: E501

        self._is_draining = is_draining

    @property
    def is_safe_to_kill(self):
        """Gets the is_safe_to_kill of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.  # noqa: E501


        :return: The is_safe_to_kill of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.  # noqa: E501
        :rtype: object
        """
        return self._is_safe_to_kill

    @is_safe_to_kill.setter
    def is_safe_to_kill(self, is_safe_to_kill):
        """Sets the is_safe_to_kill of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.


        :param is_safe_to_kill: The is_safe_to_kill of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.  # noqa: E501
        :type: object
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_safe_to_kill is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_safe_to_kill`, must not be `None`"
            )  # noqa: E501

        self._is_safe_to_kill = is_safe_to_kill

    @property
    def stop_draining(self):
        """Gets the stop_draining of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.  # noqa: E501


        :return: The stop_draining of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.  # noqa: E501
        :rtype: object
        """
        return self._stop_draining

    @stop_draining.setter
    def stop_draining(self, stop_draining):
        """Sets the stop_draining of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.


        :param stop_draining: The stop_draining of this MarathonInstanceDrainMethodOneOf1DrainMethodParams.  # noqa: E501
        :type: object
        """
        if (
            self.local_vars_configuration.client_side_validation
            and stop_draining is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `stop_draining`, must not be `None`"
            )  # noqa: E501

        self._stop_draining = stop_draining

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarathonInstanceDrainMethodOneOf1DrainMethodParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MarathonInstanceDrainMethodOneOf1DrainMethodParams):
            return True

        return self.to_dict() != other.to_dict()
