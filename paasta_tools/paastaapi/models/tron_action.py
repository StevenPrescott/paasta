"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""
import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class TronAction:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "aws_credentials_yaml": "str",
        "cap_add": "list[str]",
        "cluster": "str",
        "command": "str",
        "constraints": "list[list[str]]",
        "cpu_burst_add": "float",
        "cpus": "float",
        "deploy_group": "str",
        "disk": "float",
        "env": "dict(str, str)",
        "executor": "str",
        "expected_runtime": "str",
        "extra_constraints": "list[list[str]]",
        "extra_volumes": "list[object]",
        "mem": "float",
        "name": "str",
        "node": "str",
        "on_upstream_rerun": "str",
        "pool": "str",
        "requires": "list[str]",
        "retries": "int",
        "retries_delay": "str",
        "service": "str",
        "spark_args": "object",
        "spark_cluster_manager": "str",
        "spark_paasta_cluster": "str",
        "spark_paasta_pool": "str",
        "trigger_downstreams": "AnyOfmapboolean",
        "trigger_timeout": "str",
        "triggered_by": "list[str]",
    }

    attribute_map = {
        "aws_credentials_yaml": "aws_credentials_yaml",
        "cap_add": "cap_add",
        "cluster": "cluster",
        "command": "command",
        "constraints": "constraints",
        "cpu_burst_add": "cpu_burst_add",
        "cpus": "cpus",
        "deploy_group": "deploy_group",
        "disk": "disk",
        "env": "env",
        "executor": "executor",
        "expected_runtime": "expected_runtime",
        "extra_constraints": "extra_constraints",
        "extra_volumes": "extra_volumes",
        "mem": "mem",
        "name": "name",
        "node": "node",
        "on_upstream_rerun": "on_upstream_rerun",
        "pool": "pool",
        "requires": "requires",
        "retries": "retries",
        "retries_delay": "retries_delay",
        "service": "service",
        "spark_args": "spark_args",
        "spark_cluster_manager": "spark_cluster_manager",
        "spark_paasta_cluster": "spark_paasta_cluster",
        "spark_paasta_pool": "spark_paasta_pool",
        "trigger_downstreams": "trigger_downstreams",
        "trigger_timeout": "trigger_timeout",
        "triggered_by": "triggered_by",
    }

    def __init__(
        self,
        aws_credentials_yaml=None,
        cap_add=None,
        cluster=None,
        command=None,
        constraints=None,
        cpu_burst_add=None,
        cpus=None,
        deploy_group=None,
        disk=None,
        env=None,
        executor=None,
        expected_runtime=None,
        extra_constraints=None,
        extra_volumes=None,
        mem=None,
        name=None,
        node=None,
        on_upstream_rerun=None,
        pool=None,
        requires=None,
        retries=None,
        retries_delay=None,
        service=None,
        spark_args=None,
        spark_cluster_manager=None,
        spark_paasta_cluster=None,
        spark_paasta_pool=None,
        trigger_downstreams=None,
        trigger_timeout=None,
        triggered_by=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """TronAction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aws_credentials_yaml = None
        self._cap_add = None
        self._cluster = None
        self._command = None
        self._constraints = None
        self._cpu_burst_add = None
        self._cpus = None
        self._deploy_group = None
        self._disk = None
        self._env = None
        self._executor = None
        self._expected_runtime = None
        self._extra_constraints = None
        self._extra_volumes = None
        self._mem = None
        self._name = None
        self._node = None
        self._on_upstream_rerun = None
        self._pool = None
        self._requires = None
        self._retries = None
        self._retries_delay = None
        self._service = None
        self._spark_args = None
        self._spark_cluster_manager = None
        self._spark_paasta_cluster = None
        self._spark_paasta_pool = None
        self._trigger_downstreams = None
        self._trigger_timeout = None
        self._triggered_by = None
        self.discriminator = None

        if aws_credentials_yaml is not None:
            self.aws_credentials_yaml = aws_credentials_yaml
        if cap_add is not None:
            self.cap_add = cap_add
        if cluster is not None:
            self.cluster = cluster
        self.command = command
        if constraints is not None:
            self.constraints = constraints
        if cpu_burst_add is not None:
            self.cpu_burst_add = cpu_burst_add
        if cpus is not None:
            self.cpus = cpus
        if deploy_group is not None:
            self.deploy_group = deploy_group
        if disk is not None:
            self.disk = disk
        if env is not None:
            self.env = env
        if executor is not None:
            self.executor = executor
        if expected_runtime is not None:
            self.expected_runtime = expected_runtime
        if extra_constraints is not None:
            self.extra_constraints = extra_constraints
        if extra_volumes is not None:
            self.extra_volumes = extra_volumes
        if mem is not None:
            self.mem = mem
        if name is not None:
            self.name = name
        if node is not None:
            self.node = node
        if on_upstream_rerun is not None:
            self.on_upstream_rerun = on_upstream_rerun
        if pool is not None:
            self.pool = pool
        if requires is not None:
            self.requires = requires
        if retries is not None:
            self.retries = retries
        if retries_delay is not None:
            self.retries_delay = retries_delay
        if service is not None:
            self.service = service
        if spark_args is not None:
            self.spark_args = spark_args
        if spark_cluster_manager is not None:
            self.spark_cluster_manager = spark_cluster_manager
        if spark_paasta_cluster is not None:
            self.spark_paasta_cluster = spark_paasta_cluster
        if spark_paasta_pool is not None:
            self.spark_paasta_pool = spark_paasta_pool
        if trigger_downstreams is not None:
            self.trigger_downstreams = trigger_downstreams
        if trigger_timeout is not None:
            self.trigger_timeout = trigger_timeout
        if triggered_by is not None:
            self.triggered_by = triggered_by

    @property
    def aws_credentials_yaml(self):
        """Gets the aws_credentials_yaml of this TronAction.  # noqa: E501


        :return: The aws_credentials_yaml of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._aws_credentials_yaml

    @aws_credentials_yaml.setter
    def aws_credentials_yaml(self, aws_credentials_yaml):
        """Sets the aws_credentials_yaml of this TronAction.


        :param aws_credentials_yaml: The aws_credentials_yaml of this TronAction.  # noqa: E501
        :type: str
        """

        self._aws_credentials_yaml = aws_credentials_yaml

    @property
    def cap_add(self):
        """Gets the cap_add of this TronAction.  # noqa: E501


        :return: The cap_add of this TronAction.  # noqa: E501
        :rtype: list[str]
        """
        return self._cap_add

    @cap_add.setter
    def cap_add(self, cap_add):
        """Sets the cap_add of this TronAction.


        :param cap_add: The cap_add of this TronAction.  # noqa: E501
        :type: list[str]
        """

        self._cap_add = cap_add

    @property
    def cluster(self):
        """Gets the cluster of this TronAction.  # noqa: E501


        :return: The cluster of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this TronAction.


        :param cluster: The cluster of this TronAction.  # noqa: E501
        :type: str
        """

        self._cluster = cluster

    @property
    def command(self):
        """Gets the command of this TronAction.  # noqa: E501


        :return: The command of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this TronAction.


        :param command: The command of this TronAction.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and command is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `command`, must not be `None`"
            )  # noqa: E501

        self._command = command

    @property
    def constraints(self):
        """Gets the constraints of this TronAction.  # noqa: E501


        :return: The constraints of this TronAction.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this TronAction.


        :param constraints: The constraints of this TronAction.  # noqa: E501
        :type: list[list[str]]
        """

        self._constraints = constraints

    @property
    def cpu_burst_add(self):
        """Gets the cpu_burst_add of this TronAction.  # noqa: E501


        :return: The cpu_burst_add of this TronAction.  # noqa: E501
        :rtype: float
        """
        return self._cpu_burst_add

    @cpu_burst_add.setter
    def cpu_burst_add(self, cpu_burst_add):
        """Sets the cpu_burst_add of this TronAction.


        :param cpu_burst_add: The cpu_burst_add of this TronAction.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation
            and cpu_burst_add is not None
            and cpu_burst_add < 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `cpu_burst_add`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._cpu_burst_add = cpu_burst_add

    @property
    def cpus(self):
        """Gets the cpus of this TronAction.  # noqa: E501


        :return: The cpus of this TronAction.  # noqa: E501
        :rtype: float
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this TronAction.


        :param cpus: The cpus of this TronAction.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation
            and cpus is not None
            and cpus <= 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `cpus`, must be a value greater than `0`"
            )  # noqa: E501

        self._cpus = cpus

    @property
    def deploy_group(self):
        """Gets the deploy_group of this TronAction.  # noqa: E501


        :return: The deploy_group of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._deploy_group

    @deploy_group.setter
    def deploy_group(self, deploy_group):
        """Sets the deploy_group of this TronAction.


        :param deploy_group: The deploy_group of this TronAction.  # noqa: E501
        :type: str
        """

        self._deploy_group = deploy_group

    @property
    def disk(self):
        """Gets the disk of this TronAction.  # noqa: E501


        :return: The disk of this TronAction.  # noqa: E501
        :rtype: float
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this TronAction.


        :param disk: The disk of this TronAction.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation
            and disk is not None
            and disk <= 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `disk`, must be a value greater than `0`"
            )  # noqa: E501

        self._disk = disk

    @property
    def env(self):
        """Gets the env of this TronAction.  # noqa: E501


        :return: The env of this TronAction.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this TronAction.


        :param env: The env of this TronAction.  # noqa: E501
        :type: dict(str, str)
        """

        self._env = env

    @property
    def executor(self):
        """Gets the executor of this TronAction.  # noqa: E501


        :return: The executor of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._executor

    @executor.setter
    def executor(self, executor):
        """Sets the executor of this TronAction.


        :param executor: The executor of this TronAction.  # noqa: E501
        :type: str
        """
        allowed_values = ["ssh", "paasta", "spark"]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and executor not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `executor` ({}), must be one of {}".format(  # noqa: E501
                    executor, allowed_values
                )
            )

        self._executor = executor

    @property
    def expected_runtime(self):
        """Gets the expected_runtime of this TronAction.  # noqa: E501


        :return: The expected_runtime of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._expected_runtime

    @expected_runtime.setter
    def expected_runtime(self, expected_runtime):
        """Sets the expected_runtime of this TronAction.


        :param expected_runtime: The expected_runtime of this TronAction.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and expected_runtime is not None
            and not re.search(r"^\d+\s*[a-z]+$", expected_runtime)
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `expected_runtime`, must be a follow pattern or equal to `/^\d+\s*[a-z]+$/`"
            )  # noqa: E501

        self._expected_runtime = expected_runtime

    @property
    def extra_constraints(self):
        """Gets the extra_constraints of this TronAction.  # noqa: E501


        :return: The extra_constraints of this TronAction.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._extra_constraints

    @extra_constraints.setter
    def extra_constraints(self, extra_constraints):
        """Sets the extra_constraints of this TronAction.


        :param extra_constraints: The extra_constraints of this TronAction.  # noqa: E501
        :type: list[list[str]]
        """

        self._extra_constraints = extra_constraints

    @property
    def extra_volumes(self):
        """Gets the extra_volumes of this TronAction.  # noqa: E501


        :return: The extra_volumes of this TronAction.  # noqa: E501
        :rtype: list[object]
        """
        return self._extra_volumes

    @extra_volumes.setter
    def extra_volumes(self, extra_volumes):
        """Sets the extra_volumes of this TronAction.


        :param extra_volumes: The extra_volumes of this TronAction.  # noqa: E501
        :type: list[object]
        """

        self._extra_volumes = extra_volumes

    @property
    def mem(self):
        """Gets the mem of this TronAction.  # noqa: E501


        :return: The mem of this TronAction.  # noqa: E501
        :rtype: float
        """
        return self._mem

    @mem.setter
    def mem(self, mem):
        """Sets the mem of this TronAction.


        :param mem: The mem of this TronAction.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation
            and mem is not None
            and mem <= 32
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `mem`, must be a value greater than `32`"
            )  # noqa: E501

        self._mem = mem

    @property
    def name(self):
        """Gets the name of this TronAction.  # noqa: E501


        :return: The name of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TronAction.


        :param name: The name of this TronAction.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and name is not None
            and not re.search(r"^[A-Za-z_][\w\-]{0,254}$", name)
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z_][\w\-]{0,254}$/`"
            )  # noqa: E501

        self._name = name

    @property
    def node(self):
        """Gets the node of this TronAction.  # noqa: E501


        :return: The node of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this TronAction.


        :param node: The node of this TronAction.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and node is not None
            and not re.search(r"^[A-Za-z_][\w\-]{0,254}$", node)
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `node`, must be a follow pattern or equal to `/^[A-Za-z_][\w\-]{0,254}$/`"
            )  # noqa: E501

        self._node = node

    @property
    def on_upstream_rerun(self):
        """Gets the on_upstream_rerun of this TronAction.  # noqa: E501


        :return: The on_upstream_rerun of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._on_upstream_rerun

    @on_upstream_rerun.setter
    def on_upstream_rerun(self, on_upstream_rerun):
        """Sets the on_upstream_rerun of this TronAction.


        :param on_upstream_rerun: The on_upstream_rerun of this TronAction.  # noqa: E501
        :type: str
        """

        self._on_upstream_rerun = on_upstream_rerun

    @property
    def pool(self):
        """Gets the pool of this TronAction.  # noqa: E501


        :return: The pool of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this TronAction.


        :param pool: The pool of this TronAction.  # noqa: E501
        :type: str
        """

        self._pool = pool

    @property
    def requires(self):
        """Gets the requires of this TronAction.  # noqa: E501


        :return: The requires of this TronAction.  # noqa: E501
        :rtype: list[str]
        """
        return self._requires

    @requires.setter
    def requires(self, requires):
        """Sets the requires of this TronAction.


        :param requires: The requires of this TronAction.  # noqa: E501
        :type: list[str]
        """

        self._requires = requires

    @property
    def retries(self):
        """Gets the retries of this TronAction.  # noqa: E501


        :return: The retries of this TronAction.  # noqa: E501
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this TronAction.


        :param retries: The retries of this TronAction.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and retries is not None
            and retries < 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `retries`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._retries = retries

    @property
    def retries_delay(self):
        """Gets the retries_delay of this TronAction.  # noqa: E501


        :return: The retries_delay of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._retries_delay

    @retries_delay.setter
    def retries_delay(self, retries_delay):
        """Sets the retries_delay of this TronAction.


        :param retries_delay: The retries_delay of this TronAction.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and retries_delay is not None
            and not re.search(r"^\d+\s*[a-z]+$", retries_delay)
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `retries_delay`, must be a follow pattern or equal to `/^\d+\s*[a-z]+$/`"
            )  # noqa: E501

        self._retries_delay = retries_delay

    @property
    def service(self):
        """Gets the service of this TronAction.  # noqa: E501


        :return: The service of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this TronAction.


        :param service: The service of this TronAction.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def spark_args(self):
        """Gets the spark_args of this TronAction.  # noqa: E501


        :return: The spark_args of this TronAction.  # noqa: E501
        :rtype: object
        """
        return self._spark_args

    @spark_args.setter
    def spark_args(self, spark_args):
        """Sets the spark_args of this TronAction.


        :param spark_args: The spark_args of this TronAction.  # noqa: E501
        :type: object
        """

        self._spark_args = spark_args

    @property
    def spark_cluster_manager(self):
        """Gets the spark_cluster_manager of this TronAction.  # noqa: E501


        :return: The spark_cluster_manager of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._spark_cluster_manager

    @spark_cluster_manager.setter
    def spark_cluster_manager(self, spark_cluster_manager):
        """Sets the spark_cluster_manager of this TronAction.


        :param spark_cluster_manager: The spark_cluster_manager of this TronAction.  # noqa: E501
        :type: str
        """
        allowed_values = ["mesos", "kubernetes"]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and spark_cluster_manager not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `spark_cluster_manager` ({}), must be one of {}".format(  # noqa: E501
                    spark_cluster_manager, allowed_values
                )
            )

        self._spark_cluster_manager = spark_cluster_manager

    @property
    def spark_paasta_cluster(self):
        """Gets the spark_paasta_cluster of this TronAction.  # noqa: E501


        :return: The spark_paasta_cluster of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._spark_paasta_cluster

    @spark_paasta_cluster.setter
    def spark_paasta_cluster(self, spark_paasta_cluster):
        """Sets the spark_paasta_cluster of this TronAction.


        :param spark_paasta_cluster: The spark_paasta_cluster of this TronAction.  # noqa: E501
        :type: str
        """

        self._spark_paasta_cluster = spark_paasta_cluster

    @property
    def spark_paasta_pool(self):
        """Gets the spark_paasta_pool of this TronAction.  # noqa: E501


        :return: The spark_paasta_pool of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._spark_paasta_pool

    @spark_paasta_pool.setter
    def spark_paasta_pool(self, spark_paasta_pool):
        """Sets the spark_paasta_pool of this TronAction.


        :param spark_paasta_pool: The spark_paasta_pool of this TronAction.  # noqa: E501
        :type: str
        """

        self._spark_paasta_pool = spark_paasta_pool

    @property
    def trigger_downstreams(self):
        """Gets the trigger_downstreams of this TronAction.  # noqa: E501


        :return: The trigger_downstreams of this TronAction.  # noqa: E501
        :rtype: AnyOfmapboolean
        """
        return self._trigger_downstreams

    @trigger_downstreams.setter
    def trigger_downstreams(self, trigger_downstreams):
        """Sets the trigger_downstreams of this TronAction.


        :param trigger_downstreams: The trigger_downstreams of this TronAction.  # noqa: E501
        :type: AnyOfmapboolean
        """

        self._trigger_downstreams = trigger_downstreams

    @property
    def trigger_timeout(self):
        """Gets the trigger_timeout of this TronAction.  # noqa: E501


        :return: The trigger_timeout of this TronAction.  # noqa: E501
        :rtype: str
        """
        return self._trigger_timeout

    @trigger_timeout.setter
    def trigger_timeout(self, trigger_timeout):
        """Sets the trigger_timeout of this TronAction.


        :param trigger_timeout: The trigger_timeout of this TronAction.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and trigger_timeout is not None
            and not re.search(r"^\d+\s*[a-z]+$", trigger_timeout)
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `trigger_timeout`, must be a follow pattern or equal to `/^\d+\s*[a-z]+$/`"
            )  # noqa: E501

        self._trigger_timeout = trigger_timeout

    @property
    def triggered_by(self):
        """Gets the triggered_by of this TronAction.  # noqa: E501


        :return: The triggered_by of this TronAction.  # noqa: E501
        :rtype: list[str]
        """
        return self._triggered_by

    @triggered_by.setter
    def triggered_by(self, triggered_by):
        """Sets the triggered_by of this TronAction.


        :param triggered_by: The triggered_by of this TronAction.  # noqa: E501
        :type: list[str]
        """

        self._triggered_by = triggered_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TronAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TronAction):
            return True

        return self.to_dict() != other.to_dict()
