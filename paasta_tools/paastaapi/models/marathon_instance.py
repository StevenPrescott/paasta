"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""
import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class MarathonInstance:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "args": "list[str]",
        "autoscaling": "object",
        "backoff_factor": "int",
        "bounce_health_params": "object",
        "bounce_margin_factor": "float",
        "bounce_method": "str",
        "bounce_priority": "int",
        "bounce_start_deadline": "float",
        "cap_add": "list[str]",
        "cfs_period_us": "int",
        "cmd": "str",
        "constraints": "list[list[str]]",
        "container_port": "float",
        "cpu_burst_add": "float",
        "cpus": "float",
        "dependencies_reference": "str",
        "deploy_blacklist": "list[str]",
        "deploy_group": "str",
        "deploy_whitelist": "list[str]",
        "disk": "float",
        "drain_method": "str",
        "drain_method_params": "object",
        "env": "dict(str, str)",
        "extra_constraints": "list[list[str]]",
        "extra_docker_args": "dict(str, str)",
        "extra_volumes": "list[object]",
        "gpus": "int",
        "healthcheck_cmd": "str",
        "healthcheck_grace_period_seconds": "float",
        "healthcheck_interval_seconds": "float",
        "healthcheck_max_consecutive_failures": "int",
        "healthcheck_mode": "str",
        "healthcheck_timeout_seconds": "float",
        "healthcheck_uri": "str",
        "host_port": "int",
        "instances": "int",
        "marathon_shard": "int",
        "max_instances": "int",
        "max_launch_delay_seconds": "int",
        "mem": "float",
        "min_instances": "int",
        "monitoring": "dict(str, object)",
        "net": "str",
        "pool": "str",
        "previous_marathon_shards": "list[str]",
        "registrations": "list[str]",
        "replication_threshold": "int",
        "security": "object",
        "sfn_autoscaling": "object",
    }

    attribute_map = {
        "args": "args",
        "autoscaling": "autoscaling",
        "backoff_factor": "backoff_factor",
        "bounce_health_params": "bounce_health_params",
        "bounce_margin_factor": "bounce_margin_factor",
        "bounce_method": "bounce_method",
        "bounce_priority": "bounce_priority",
        "bounce_start_deadline": "bounce_start_deadline",
        "cap_add": "cap_add",
        "cfs_period_us": "cfs_period_us",
        "cmd": "cmd",
        "constraints": "constraints",
        "container_port": "container_port",
        "cpu_burst_add": "cpu_burst_add",
        "cpus": "cpus",
        "dependencies_reference": "dependencies_reference",
        "deploy_blacklist": "deploy_blacklist",
        "deploy_group": "deploy_group",
        "deploy_whitelist": "deploy_whitelist",
        "disk": "disk",
        "drain_method": "drain_method",
        "drain_method_params": "drain_method_params",
        "env": "env",
        "extra_constraints": "extra_constraints",
        "extra_docker_args": "extra_docker_args",
        "extra_volumes": "extra_volumes",
        "gpus": "gpus",
        "healthcheck_cmd": "healthcheck_cmd",
        "healthcheck_grace_period_seconds": "healthcheck_grace_period_seconds",
        "healthcheck_interval_seconds": "healthcheck_interval_seconds",
        "healthcheck_max_consecutive_failures": "healthcheck_max_consecutive_failures",
        "healthcheck_mode": "healthcheck_mode",
        "healthcheck_timeout_seconds": "healthcheck_timeout_seconds",
        "healthcheck_uri": "healthcheck_uri",
        "host_port": "host_port",
        "instances": "instances",
        "marathon_shard": "marathon_shard",
        "max_instances": "max_instances",
        "max_launch_delay_seconds": "max_launch_delay_seconds",
        "mem": "mem",
        "min_instances": "min_instances",
        "monitoring": "monitoring",
        "net": "net",
        "pool": "pool",
        "previous_marathon_shards": "previous_marathon_shards",
        "registrations": "registrations",
        "replication_threshold": "replication_threshold",
        "security": "security",
        "sfn_autoscaling": "sfn_autoscaling",
    }

    def __init__(
        self,
        args=None,
        autoscaling=None,
        backoff_factor=2,
        bounce_health_params=None,
        bounce_margin_factor=1,
        bounce_method=None,
        bounce_priority=None,
        bounce_start_deadline=None,
        cap_add=None,
        cfs_period_us=None,
        cmd=None,
        constraints=None,
        container_port=None,
        cpu_burst_add=None,
        cpus=0.25,
        dependencies_reference=None,
        deploy_blacklist=None,
        deploy_group=None,
        deploy_whitelist=None,
        disk=1024,
        drain_method="noop",
        drain_method_params=None,
        env=None,
        extra_constraints=None,
        extra_docker_args=None,
        extra_volumes=None,
        gpus=None,
        healthcheck_cmd="/bin/true",
        healthcheck_grace_period_seconds=60,
        healthcheck_interval_seconds=10,
        healthcheck_max_consecutive_failures=6,
        healthcheck_mode=None,
        healthcheck_timeout_seconds=10,
        healthcheck_uri="/status",
        host_port=0,
        instances=None,
        marathon_shard=None,
        max_instances=None,
        max_launch_delay_seconds=300,
        mem=1024,
        min_instances=None,
        monitoring=None,
        net=None,
        pool=None,
        previous_marathon_shards=None,
        registrations=None,
        replication_threshold=None,
        security=None,
        sfn_autoscaling=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """MarathonInstance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._args = None
        self._autoscaling = None
        self._backoff_factor = None
        self._bounce_health_params = None
        self._bounce_margin_factor = None
        self._bounce_method = None
        self._bounce_priority = None
        self._bounce_start_deadline = None
        self._cap_add = None
        self._cfs_period_us = None
        self._cmd = None
        self._constraints = None
        self._container_port = None
        self._cpu_burst_add = None
        self._cpus = None
        self._dependencies_reference = None
        self._deploy_blacklist = None
        self._deploy_group = None
        self._deploy_whitelist = None
        self._disk = None
        self._drain_method = None
        self._drain_method_params = None
        self._env = None
        self._extra_constraints = None
        self._extra_docker_args = None
        self._extra_volumes = None
        self._gpus = None
        self._healthcheck_cmd = None
        self._healthcheck_grace_period_seconds = None
        self._healthcheck_interval_seconds = None
        self._healthcheck_max_consecutive_failures = None
        self._healthcheck_mode = None
        self._healthcheck_timeout_seconds = None
        self._healthcheck_uri = None
        self._host_port = None
        self._instances = None
        self._marathon_shard = None
        self._max_instances = None
        self._max_launch_delay_seconds = None
        self._mem = None
        self._min_instances = None
        self._monitoring = None
        self._net = None
        self._pool = None
        self._previous_marathon_shards = None
        self._registrations = None
        self._replication_threshold = None
        self._security = None
        self._sfn_autoscaling = None
        self.discriminator = None

        if args is not None:
            self.args = args
        if autoscaling is not None:
            self.autoscaling = autoscaling
        if backoff_factor is not None:
            self.backoff_factor = backoff_factor
        if bounce_health_params is not None:
            self.bounce_health_params = bounce_health_params
        if bounce_margin_factor is not None:
            self.bounce_margin_factor = bounce_margin_factor
        if bounce_method is not None:
            self.bounce_method = bounce_method
        if bounce_priority is not None:
            self.bounce_priority = bounce_priority
        if bounce_start_deadline is not None:
            self.bounce_start_deadline = bounce_start_deadline
        if cap_add is not None:
            self.cap_add = cap_add
        if cfs_period_us is not None:
            self.cfs_period_us = cfs_period_us
        if cmd is not None:
            self.cmd = cmd
        if constraints is not None:
            self.constraints = constraints
        if container_port is not None:
            self.container_port = container_port
        if cpu_burst_add is not None:
            self.cpu_burst_add = cpu_burst_add
        if cpus is not None:
            self.cpus = cpus
        if dependencies_reference is not None:
            self.dependencies_reference = dependencies_reference
        if deploy_blacklist is not None:
            self.deploy_blacklist = deploy_blacklist
        if deploy_group is not None:
            self.deploy_group = deploy_group
        if deploy_whitelist is not None:
            self.deploy_whitelist = deploy_whitelist
        if disk is not None:
            self.disk = disk
        if drain_method is not None:
            self.drain_method = drain_method
        if drain_method_params is not None:
            self.drain_method_params = drain_method_params
        if env is not None:
            self.env = env
        if extra_constraints is not None:
            self.extra_constraints = extra_constraints
        if extra_docker_args is not None:
            self.extra_docker_args = extra_docker_args
        if extra_volumes is not None:
            self.extra_volumes = extra_volumes
        if gpus is not None:
            self.gpus = gpus
        if healthcheck_cmd is not None:
            self.healthcheck_cmd = healthcheck_cmd
        if healthcheck_grace_period_seconds is not None:
            self.healthcheck_grace_period_seconds = healthcheck_grace_period_seconds
        if healthcheck_interval_seconds is not None:
            self.healthcheck_interval_seconds = healthcheck_interval_seconds
        if healthcheck_max_consecutive_failures is not None:
            self.healthcheck_max_consecutive_failures = (
                healthcheck_max_consecutive_failures
            )
        if healthcheck_mode is not None:
            self.healthcheck_mode = healthcheck_mode
        if healthcheck_timeout_seconds is not None:
            self.healthcheck_timeout_seconds = healthcheck_timeout_seconds
        if healthcheck_uri is not None:
            self.healthcheck_uri = healthcheck_uri
        if host_port is not None:
            self.host_port = host_port
        if instances is not None:
            self.instances = instances
        if marathon_shard is not None:
            self.marathon_shard = marathon_shard
        if max_instances is not None:
            self.max_instances = max_instances
        if max_launch_delay_seconds is not None:
            self.max_launch_delay_seconds = max_launch_delay_seconds
        if mem is not None:
            self.mem = mem
        if min_instances is not None:
            self.min_instances = min_instances
        if monitoring is not None:
            self.monitoring = monitoring
        if net is not None:
            self.net = net
        if pool is not None:
            self.pool = pool
        if previous_marathon_shards is not None:
            self.previous_marathon_shards = previous_marathon_shards
        if registrations is not None:
            self.registrations = registrations
        if replication_threshold is not None:
            self.replication_threshold = replication_threshold
        if security is not None:
            self.security = security
        if sfn_autoscaling is not None:
            self.sfn_autoscaling = sfn_autoscaling

    @property
    def args(self):
        """Gets the args of this MarathonInstance.  # noqa: E501


        :return: The args of this MarathonInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this MarathonInstance.


        :param args: The args of this MarathonInstance.  # noqa: E501
        :type: list[str]
        """

        self._args = args

    @property
    def autoscaling(self):
        """Gets the autoscaling of this MarathonInstance.  # noqa: E501


        :return: The autoscaling of this MarathonInstance.  # noqa: E501
        :rtype: object
        """
        return self._autoscaling

    @autoscaling.setter
    def autoscaling(self, autoscaling):
        """Sets the autoscaling of this MarathonInstance.


        :param autoscaling: The autoscaling of this MarathonInstance.  # noqa: E501
        :type: object
        """

        self._autoscaling = autoscaling

    @property
    def backoff_factor(self):
        """Gets the backoff_factor of this MarathonInstance.  # noqa: E501


        :return: The backoff_factor of this MarathonInstance.  # noqa: E501
        :rtype: int
        """
        return self._backoff_factor

    @backoff_factor.setter
    def backoff_factor(self, backoff_factor):
        """Sets the backoff_factor of this MarathonInstance.


        :param backoff_factor: The backoff_factor of this MarathonInstance.  # noqa: E501
        :type: int
        """

        self._backoff_factor = backoff_factor

    @property
    def bounce_health_params(self):
        """Gets the bounce_health_params of this MarathonInstance.  # noqa: E501


        :return: The bounce_health_params of this MarathonInstance.  # noqa: E501
        :rtype: object
        """
        return self._bounce_health_params

    @bounce_health_params.setter
    def bounce_health_params(self, bounce_health_params):
        """Sets the bounce_health_params of this MarathonInstance.


        :param bounce_health_params: The bounce_health_params of this MarathonInstance.  # noqa: E501
        :type: object
        """

        self._bounce_health_params = bounce_health_params

    @property
    def bounce_margin_factor(self):
        """Gets the bounce_margin_factor of this MarathonInstance.  # noqa: E501


        :return: The bounce_margin_factor of this MarathonInstance.  # noqa: E501
        :rtype: float
        """
        return self._bounce_margin_factor

    @bounce_margin_factor.setter
    def bounce_margin_factor(self, bounce_margin_factor):
        """Sets the bounce_margin_factor of this MarathonInstance.


        :param bounce_margin_factor: The bounce_margin_factor of this MarathonInstance.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation
            and bounce_margin_factor is not None
            and bounce_margin_factor > 1
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `bounce_margin_factor`, must be a value less than or equal to `1`"
            )  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and bounce_margin_factor is not None
            and bounce_margin_factor <= 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `bounce_margin_factor`, must be a value greater than `0`"
            )  # noqa: E501

        self._bounce_margin_factor = bounce_margin_factor

    @property
    def bounce_method(self):
        """Gets the bounce_method of this MarathonInstance.  # noqa: E501


        :return: The bounce_method of this MarathonInstance.  # noqa: E501
        :rtype: str
        """
        return self._bounce_method

    @bounce_method.setter
    def bounce_method(self, bounce_method):
        """Sets the bounce_method of this MarathonInstance.


        :param bounce_method: The bounce_method of this MarathonInstance.  # noqa: E501
        :type: str
        """

        self._bounce_method = bounce_method

    @property
    def bounce_priority(self):
        """Gets the bounce_priority of this MarathonInstance.  # noqa: E501


        :return: The bounce_priority of this MarathonInstance.  # noqa: E501
        :rtype: int
        """
        return self._bounce_priority

    @bounce_priority.setter
    def bounce_priority(self, bounce_priority):
        """Sets the bounce_priority of this MarathonInstance.


        :param bounce_priority: The bounce_priority of this MarathonInstance.  # noqa: E501
        :type: int
        """

        self._bounce_priority = bounce_priority

    @property
    def bounce_start_deadline(self):
        """Gets the bounce_start_deadline of this MarathonInstance.  # noqa: E501


        :return: The bounce_start_deadline of this MarathonInstance.  # noqa: E501
        :rtype: float
        """
        return self._bounce_start_deadline

    @bounce_start_deadline.setter
    def bounce_start_deadline(self, bounce_start_deadline):
        """Sets the bounce_start_deadline of this MarathonInstance.


        :param bounce_start_deadline: The bounce_start_deadline of this MarathonInstance.  # noqa: E501
        :type: float
        """

        self._bounce_start_deadline = bounce_start_deadline

    @property
    def cap_add(self):
        """Gets the cap_add of this MarathonInstance.  # noqa: E501


        :return: The cap_add of this MarathonInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._cap_add

    @cap_add.setter
    def cap_add(self, cap_add):
        """Sets the cap_add of this MarathonInstance.


        :param cap_add: The cap_add of this MarathonInstance.  # noqa: E501
        :type: list[str]
        """

        self._cap_add = cap_add

    @property
    def cfs_period_us(self):
        """Gets the cfs_period_us of this MarathonInstance.  # noqa: E501


        :return: The cfs_period_us of this MarathonInstance.  # noqa: E501
        :rtype: int
        """
        return self._cfs_period_us

    @cfs_period_us.setter
    def cfs_period_us(self, cfs_period_us):
        """Sets the cfs_period_us of this MarathonInstance.


        :param cfs_period_us: The cfs_period_us of this MarathonInstance.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and cfs_period_us is not None
            and cfs_period_us > 1000000
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `cfs_period_us`, must be a value less than or equal to `1000000`"
            )  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and cfs_period_us is not None
            and cfs_period_us < 1000
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `cfs_period_us`, must be a value greater than or equal to `1000`"
            )  # noqa: E501

        self._cfs_period_us = cfs_period_us

    @property
    def cmd(self):
        """Gets the cmd of this MarathonInstance.  # noqa: E501


        :return: The cmd of this MarathonInstance.  # noqa: E501
        :rtype: str
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this MarathonInstance.


        :param cmd: The cmd of this MarathonInstance.  # noqa: E501
        :type: str
        """

        self._cmd = cmd

    @property
    def constraints(self):
        """Gets the constraints of this MarathonInstance.  # noqa: E501


        :return: The constraints of this MarathonInstance.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this MarathonInstance.


        :param constraints: The constraints of this MarathonInstance.  # noqa: E501
        :type: list[list[str]]
        """

        self._constraints = constraints

    @property
    def container_port(self):
        """Gets the container_port of this MarathonInstance.  # noqa: E501


        :return: The container_port of this MarathonInstance.  # noqa: E501
        :rtype: float
        """
        return self._container_port

    @container_port.setter
    def container_port(self, container_port):
        """Sets the container_port of this MarathonInstance.


        :param container_port: The container_port of this MarathonInstance.  # noqa: E501
        :type: float
        """

        self._container_port = container_port

    @property
    def cpu_burst_add(self):
        """Gets the cpu_burst_add of this MarathonInstance.  # noqa: E501


        :return: The cpu_burst_add of this MarathonInstance.  # noqa: E501
        :rtype: float
        """
        return self._cpu_burst_add

    @cpu_burst_add.setter
    def cpu_burst_add(self, cpu_burst_add):
        """Sets the cpu_burst_add of this MarathonInstance.


        :param cpu_burst_add: The cpu_burst_add of this MarathonInstance.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation
            and cpu_burst_add is not None
            and cpu_burst_add < 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `cpu_burst_add`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._cpu_burst_add = cpu_burst_add

    @property
    def cpus(self):
        """Gets the cpus of this MarathonInstance.  # noqa: E501


        :return: The cpus of this MarathonInstance.  # noqa: E501
        :rtype: float
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this MarathonInstance.


        :param cpus: The cpus of this MarathonInstance.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation
            and cpus is not None
            and cpus <= 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `cpus`, must be a value greater than `0`"
            )  # noqa: E501

        self._cpus = cpus

    @property
    def dependencies_reference(self):
        """Gets the dependencies_reference of this MarathonInstance.  # noqa: E501


        :return: The dependencies_reference of this MarathonInstance.  # noqa: E501
        :rtype: str
        """
        return self._dependencies_reference

    @dependencies_reference.setter
    def dependencies_reference(self, dependencies_reference):
        """Sets the dependencies_reference of this MarathonInstance.


        :param dependencies_reference: The dependencies_reference of this MarathonInstance.  # noqa: E501
        :type: str
        """

        self._dependencies_reference = dependencies_reference

    @property
    def deploy_blacklist(self):
        """Gets the deploy_blacklist of this MarathonInstance.  # noqa: E501


        :return: The deploy_blacklist of this MarathonInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._deploy_blacklist

    @deploy_blacklist.setter
    def deploy_blacklist(self, deploy_blacklist):
        """Sets the deploy_blacklist of this MarathonInstance.


        :param deploy_blacklist: The deploy_blacklist of this MarathonInstance.  # noqa: E501
        :type: list[str]
        """

        self._deploy_blacklist = deploy_blacklist

    @property
    def deploy_group(self):
        """Gets the deploy_group of this MarathonInstance.  # noqa: E501


        :return: The deploy_group of this MarathonInstance.  # noqa: E501
        :rtype: str
        """
        return self._deploy_group

    @deploy_group.setter
    def deploy_group(self, deploy_group):
        """Sets the deploy_group of this MarathonInstance.


        :param deploy_group: The deploy_group of this MarathonInstance.  # noqa: E501
        :type: str
        """

        self._deploy_group = deploy_group

    @property
    def deploy_whitelist(self):
        """Gets the deploy_whitelist of this MarathonInstance.  # noqa: E501


        :return: The deploy_whitelist of this MarathonInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._deploy_whitelist

    @deploy_whitelist.setter
    def deploy_whitelist(self, deploy_whitelist):
        """Sets the deploy_whitelist of this MarathonInstance.


        :param deploy_whitelist: The deploy_whitelist of this MarathonInstance.  # noqa: E501
        :type: list[str]
        """

        self._deploy_whitelist = deploy_whitelist

    @property
    def disk(self):
        """Gets the disk of this MarathonInstance.  # noqa: E501


        :return: The disk of this MarathonInstance.  # noqa: E501
        :rtype: float
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this MarathonInstance.


        :param disk: The disk of this MarathonInstance.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation
            and disk is not None
            and disk <= 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `disk`, must be a value greater than `0`"
            )  # noqa: E501

        self._disk = disk

    @property
    def drain_method(self):
        """Gets the drain_method of this MarathonInstance.  # noqa: E501


        :return: The drain_method of this MarathonInstance.  # noqa: E501
        :rtype: str
        """
        return self._drain_method

    @drain_method.setter
    def drain_method(self, drain_method):
        """Sets the drain_method of this MarathonInstance.


        :param drain_method: The drain_method of this MarathonInstance.  # noqa: E501
        :type: str
        """
        allowed_values = ["noop", "hacheck", "http", "test"]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and drain_method not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `drain_method` ({}), must be one of {}".format(  # noqa: E501
                    drain_method, allowed_values
                )
            )

        self._drain_method = drain_method

    @property
    def drain_method_params(self):
        """Gets the drain_method_params of this MarathonInstance.  # noqa: E501


        :return: The drain_method_params of this MarathonInstance.  # noqa: E501
        :rtype: object
        """
        return self._drain_method_params

    @drain_method_params.setter
    def drain_method_params(self, drain_method_params):
        """Sets the drain_method_params of this MarathonInstance.


        :param drain_method_params: The drain_method_params of this MarathonInstance.  # noqa: E501
        :type: object
        """

        self._drain_method_params = drain_method_params

    @property
    def env(self):
        """Gets the env of this MarathonInstance.  # noqa: E501


        :return: The env of this MarathonInstance.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this MarathonInstance.


        :param env: The env of this MarathonInstance.  # noqa: E501
        :type: dict(str, str)
        """

        self._env = env

    @property
    def extra_constraints(self):
        """Gets the extra_constraints of this MarathonInstance.  # noqa: E501


        :return: The extra_constraints of this MarathonInstance.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._extra_constraints

    @extra_constraints.setter
    def extra_constraints(self, extra_constraints):
        """Sets the extra_constraints of this MarathonInstance.


        :param extra_constraints: The extra_constraints of this MarathonInstance.  # noqa: E501
        :type: list[list[str]]
        """

        self._extra_constraints = extra_constraints

    @property
    def extra_docker_args(self):
        """Gets the extra_docker_args of this MarathonInstance.  # noqa: E501


        :return: The extra_docker_args of this MarathonInstance.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extra_docker_args

    @extra_docker_args.setter
    def extra_docker_args(self, extra_docker_args):
        """Sets the extra_docker_args of this MarathonInstance.


        :param extra_docker_args: The extra_docker_args of this MarathonInstance.  # noqa: E501
        :type: dict(str, str)
        """

        self._extra_docker_args = extra_docker_args

    @property
    def extra_volumes(self):
        """Gets the extra_volumes of this MarathonInstance.  # noqa: E501


        :return: The extra_volumes of this MarathonInstance.  # noqa: E501
        :rtype: list[object]
        """
        return self._extra_volumes

    @extra_volumes.setter
    def extra_volumes(self, extra_volumes):
        """Sets the extra_volumes of this MarathonInstance.


        :param extra_volumes: The extra_volumes of this MarathonInstance.  # noqa: E501
        :type: list[object]
        """

        self._extra_volumes = extra_volumes

    @property
    def gpus(self):
        """Gets the gpus of this MarathonInstance.  # noqa: E501


        :return: The gpus of this MarathonInstance.  # noqa: E501
        :rtype: int
        """
        return self._gpus

    @gpus.setter
    def gpus(self, gpus):
        """Sets the gpus of this MarathonInstance.


        :param gpus: The gpus of this MarathonInstance.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and gpus is not None
            and gpus < 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `gpus`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._gpus = gpus

    @property
    def healthcheck_cmd(self):
        """Gets the healthcheck_cmd of this MarathonInstance.  # noqa: E501


        :return: The healthcheck_cmd of this MarathonInstance.  # noqa: E501
        :rtype: str
        """
        return self._healthcheck_cmd

    @healthcheck_cmd.setter
    def healthcheck_cmd(self, healthcheck_cmd):
        """Sets the healthcheck_cmd of this MarathonInstance.


        :param healthcheck_cmd: The healthcheck_cmd of this MarathonInstance.  # noqa: E501
        :type: str
        """

        self._healthcheck_cmd = healthcheck_cmd

    @property
    def healthcheck_grace_period_seconds(self):
        """Gets the healthcheck_grace_period_seconds of this MarathonInstance.  # noqa: E501


        :return: The healthcheck_grace_period_seconds of this MarathonInstance.  # noqa: E501
        :rtype: float
        """
        return self._healthcheck_grace_period_seconds

    @healthcheck_grace_period_seconds.setter
    def healthcheck_grace_period_seconds(self, healthcheck_grace_period_seconds):
        """Sets the healthcheck_grace_period_seconds of this MarathonInstance.


        :param healthcheck_grace_period_seconds: The healthcheck_grace_period_seconds of this MarathonInstance.  # noqa: E501
        :type: float
        """

        self._healthcheck_grace_period_seconds = healthcheck_grace_period_seconds

    @property
    def healthcheck_interval_seconds(self):
        """Gets the healthcheck_interval_seconds of this MarathonInstance.  # noqa: E501


        :return: The healthcheck_interval_seconds of this MarathonInstance.  # noqa: E501
        :rtype: float
        """
        return self._healthcheck_interval_seconds

    @healthcheck_interval_seconds.setter
    def healthcheck_interval_seconds(self, healthcheck_interval_seconds):
        """Sets the healthcheck_interval_seconds of this MarathonInstance.


        :param healthcheck_interval_seconds: The healthcheck_interval_seconds of this MarathonInstance.  # noqa: E501
        :type: float
        """

        self._healthcheck_interval_seconds = healthcheck_interval_seconds

    @property
    def healthcheck_max_consecutive_failures(self):
        """Gets the healthcheck_max_consecutive_failures of this MarathonInstance.  # noqa: E501


        :return: The healthcheck_max_consecutive_failures of this MarathonInstance.  # noqa: E501
        :rtype: int
        """
        return self._healthcheck_max_consecutive_failures

    @healthcheck_max_consecutive_failures.setter
    def healthcheck_max_consecutive_failures(
        self, healthcheck_max_consecutive_failures
    ):
        """Sets the healthcheck_max_consecutive_failures of this MarathonInstance.


        :param healthcheck_max_consecutive_failures: The healthcheck_max_consecutive_failures of this MarathonInstance.  # noqa: E501
        :type: int
        """

        self._healthcheck_max_consecutive_failures = (
            healthcheck_max_consecutive_failures
        )

    @property
    def healthcheck_mode(self):
        """Gets the healthcheck_mode of this MarathonInstance.  # noqa: E501


        :return: The healthcheck_mode of this MarathonInstance.  # noqa: E501
        :rtype: str
        """
        return self._healthcheck_mode

    @healthcheck_mode.setter
    def healthcheck_mode(self, healthcheck_mode):
        """Sets the healthcheck_mode of this MarathonInstance.


        :param healthcheck_mode: The healthcheck_mode of this MarathonInstance.  # noqa: E501
        :type: str
        """
        allowed_values = ["cmd", "tcp", "http", "https"]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and healthcheck_mode not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `healthcheck_mode` ({}), must be one of {}".format(  # noqa: E501
                    healthcheck_mode, allowed_values
                )
            )

        self._healthcheck_mode = healthcheck_mode

    @property
    def healthcheck_timeout_seconds(self):
        """Gets the healthcheck_timeout_seconds of this MarathonInstance.  # noqa: E501


        :return: The healthcheck_timeout_seconds of this MarathonInstance.  # noqa: E501
        :rtype: float
        """
        return self._healthcheck_timeout_seconds

    @healthcheck_timeout_seconds.setter
    def healthcheck_timeout_seconds(self, healthcheck_timeout_seconds):
        """Sets the healthcheck_timeout_seconds of this MarathonInstance.


        :param healthcheck_timeout_seconds: The healthcheck_timeout_seconds of this MarathonInstance.  # noqa: E501
        :type: float
        """

        self._healthcheck_timeout_seconds = healthcheck_timeout_seconds

    @property
    def healthcheck_uri(self):
        """Gets the healthcheck_uri of this MarathonInstance.  # noqa: E501


        :return: The healthcheck_uri of this MarathonInstance.  # noqa: E501
        :rtype: str
        """
        return self._healthcheck_uri

    @healthcheck_uri.setter
    def healthcheck_uri(self, healthcheck_uri):
        """Sets the healthcheck_uri of this MarathonInstance.


        :param healthcheck_uri: The healthcheck_uri of this MarathonInstance.  # noqa: E501
        :type: str
        """

        self._healthcheck_uri = healthcheck_uri

    @property
    def host_port(self):
        """Gets the host_port of this MarathonInstance.  # noqa: E501


        :return: The host_port of this MarathonInstance.  # noqa: E501
        :rtype: int
        """
        return self._host_port

    @host_port.setter
    def host_port(self, host_port):
        """Sets the host_port of this MarathonInstance.


        :param host_port: The host_port of this MarathonInstance.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and host_port is not None
            and host_port > 65535
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `host_port`, must be a value less than or equal to `65535`"
            )  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and host_port is not None
            and host_port < 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `host_port`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._host_port = host_port

    @property
    def instances(self):
        """Gets the instances of this MarathonInstance.  # noqa: E501


        :return: The instances of this MarathonInstance.  # noqa: E501
        :rtype: int
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this MarathonInstance.


        :param instances: The instances of this MarathonInstance.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and instances is not None
            and instances < 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `instances`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._instances = instances

    @property
    def marathon_shard(self):
        """Gets the marathon_shard of this MarathonInstance.  # noqa: E501


        :return: The marathon_shard of this MarathonInstance.  # noqa: E501
        :rtype: int
        """
        return self._marathon_shard

    @marathon_shard.setter
    def marathon_shard(self, marathon_shard):
        """Sets the marathon_shard of this MarathonInstance.


        :param marathon_shard: The marathon_shard of this MarathonInstance.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and marathon_shard is not None
            and marathon_shard < 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `marathon_shard`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._marathon_shard = marathon_shard

    @property
    def max_instances(self):
        """Gets the max_instances of this MarathonInstance.  # noqa: E501


        :return: The max_instances of this MarathonInstance.  # noqa: E501
        :rtype: int
        """
        return self._max_instances

    @max_instances.setter
    def max_instances(self, max_instances):
        """Sets the max_instances of this MarathonInstance.


        :param max_instances: The max_instances of this MarathonInstance.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and max_instances is not None
            and max_instances < 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `max_instances`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._max_instances = max_instances

    @property
    def max_launch_delay_seconds(self):
        """Gets the max_launch_delay_seconds of this MarathonInstance.  # noqa: E501


        :return: The max_launch_delay_seconds of this MarathonInstance.  # noqa: E501
        :rtype: int
        """
        return self._max_launch_delay_seconds

    @max_launch_delay_seconds.setter
    def max_launch_delay_seconds(self, max_launch_delay_seconds):
        """Sets the max_launch_delay_seconds of this MarathonInstance.


        :param max_launch_delay_seconds: The max_launch_delay_seconds of this MarathonInstance.  # noqa: E501
        :type: int
        """

        self._max_launch_delay_seconds = max_launch_delay_seconds

    @property
    def mem(self):
        """Gets the mem of this MarathonInstance.  # noqa: E501


        :return: The mem of this MarathonInstance.  # noqa: E501
        :rtype: float
        """
        return self._mem

    @mem.setter
    def mem(self, mem):
        """Sets the mem of this MarathonInstance.


        :param mem: The mem of this MarathonInstance.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation
            and mem is not None
            and mem <= 32
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `mem`, must be a value greater than `32`"
            )  # noqa: E501

        self._mem = mem

    @property
    def min_instances(self):
        """Gets the min_instances of this MarathonInstance.  # noqa: E501


        :return: The min_instances of this MarathonInstance.  # noqa: E501
        :rtype: int
        """
        return self._min_instances

    @min_instances.setter
    def min_instances(self, min_instances):
        """Sets the min_instances of this MarathonInstance.


        :param min_instances: The min_instances of this MarathonInstance.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and min_instances is not None
            and min_instances < 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `min_instances`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._min_instances = min_instances

    @property
    def monitoring(self):
        """Gets the monitoring of this MarathonInstance.  # noqa: E501


        :return: The monitoring of this MarathonInstance.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring):
        """Sets the monitoring of this MarathonInstance.


        :param monitoring: The monitoring of this MarathonInstance.  # noqa: E501
        :type: dict(str, object)
        """

        self._monitoring = monitoring

    @property
    def net(self):
        """Gets the net of this MarathonInstance.  # noqa: E501


        :return: The net of this MarathonInstance.  # noqa: E501
        :rtype: str
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this MarathonInstance.


        :param net: The net of this MarathonInstance.  # noqa: E501
        :type: str
        """

        self._net = net

    @property
    def pool(self):
        """Gets the pool of this MarathonInstance.  # noqa: E501


        :return: The pool of this MarathonInstance.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this MarathonInstance.


        :param pool: The pool of this MarathonInstance.  # noqa: E501
        :type: str
        """

        self._pool = pool

    @property
    def previous_marathon_shards(self):
        """Gets the previous_marathon_shards of this MarathonInstance.  # noqa: E501


        :return: The previous_marathon_shards of this MarathonInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._previous_marathon_shards

    @previous_marathon_shards.setter
    def previous_marathon_shards(self, previous_marathon_shards):
        """Sets the previous_marathon_shards of this MarathonInstance.


        :param previous_marathon_shards: The previous_marathon_shards of this MarathonInstance.  # noqa: E501
        :type: list[str]
        """

        self._previous_marathon_shards = previous_marathon_shards

    @property
    def registrations(self):
        """Gets the registrations of this MarathonInstance.  # noqa: E501


        :return: The registrations of this MarathonInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._registrations

    @registrations.setter
    def registrations(self, registrations):
        """Sets the registrations of this MarathonInstance.


        :param registrations: The registrations of this MarathonInstance.  # noqa: E501
        :type: list[str]
        """

        self._registrations = registrations

    @property
    def replication_threshold(self):
        """Gets the replication_threshold of this MarathonInstance.  # noqa: E501


        :return: The replication_threshold of this MarathonInstance.  # noqa: E501
        :rtype: int
        """
        return self._replication_threshold

    @replication_threshold.setter
    def replication_threshold(self, replication_threshold):
        """Sets the replication_threshold of this MarathonInstance.


        :param replication_threshold: The replication_threshold of this MarathonInstance.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and replication_threshold is not None
            and replication_threshold < 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `replication_threshold`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._replication_threshold = replication_threshold

    @property
    def security(self):
        """Gets the security of this MarathonInstance.  # noqa: E501


        :return: The security of this MarathonInstance.  # noqa: E501
        :rtype: object
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this MarathonInstance.


        :param security: The security of this MarathonInstance.  # noqa: E501
        :type: object
        """

        self._security = security

    @property
    def sfn_autoscaling(self):
        """Gets the sfn_autoscaling of this MarathonInstance.  # noqa: E501


        :return: The sfn_autoscaling of this MarathonInstance.  # noqa: E501
        :rtype: object
        """
        return self._sfn_autoscaling

    @sfn_autoscaling.setter
    def sfn_autoscaling(self, sfn_autoscaling):
        """Sets the sfn_autoscaling of this MarathonInstance.


        :param sfn_autoscaling: The sfn_autoscaling of this MarathonInstance.  # noqa: E501
        :type: object
        """

        self._sfn_autoscaling = sfn_autoscaling

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarathonInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MarathonInstance):
            return True

        return self.to_dict() != other.to_dict()
