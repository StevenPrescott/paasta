"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""
import re  # noqa: F401

import six

from paasta_tools.paastaapi.api_client import ApiClient
from paasta_tools.paastaapi.exceptions import ApiTypeError
from paasta_tools.paastaapi.exceptions import ApiValueError

# python 2 and python 3 compatibility library


class ServiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delay_instance(self, service, instance, **kwargs):  # noqa: E501
        """Get the possible reasons for a deployment delay for a marathon service.instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delay_instance(service, instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str service: Service name (required)
        :param str instance: Instance name (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.delay_instance_with_http_info(
            service, instance, **kwargs
        )  # noqa: E501

    def delay_instance_with_http_info(self, service, instance, **kwargs):  # noqa: E501
        """Get the possible reasons for a deployment delay for a marathon service.instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delay_instance_with_http_info(service, instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str service: Service name (required)
        :param str instance: Instance name (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["service", "instance"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delay_instance" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'service' is set
        if self.api_client.client_side_validation and (
            "service" not in local_var_params
            or local_var_params["service"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `service` when calling `delay_instance`"
            )  # noqa: E501
        # verify the required parameter 'instance' is set
        if self.api_client.client_side_validation and (
            "instance" not in local_var_params
            or local_var_params["instance"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `instance` when calling `delay_instance`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "service" in local_var_params:
            path_params["service"] = local_var_params["service"]  # noqa: E501
        if "instance" in local_var_params:
            path_params["instance"] = local_var_params["instance"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/services/{service}/{instance}/delay",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def instance_set_state(
        self, service, instance, desired_state, **kwargs
    ):  # noqa: E501
        """Change state of service_name.instance_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instance_set_state(service, instance, desired_state, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str service: Service name (required)
        :param str instance: Instance name (required)
        :param str desired_state: Desired state (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.instance_set_state_with_http_info(
            service, instance, desired_state, **kwargs
        )  # noqa: E501

    def instance_set_state_with_http_info(
        self, service, instance, desired_state, **kwargs
    ):  # noqa: E501
        """Change state of service_name.instance_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instance_set_state_with_http_info(service, instance, desired_state, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str service: Service name (required)
        :param str instance: Instance name (required)
        :param str desired_state: Desired state (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["service", "instance", "desired_state"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instance_set_state" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'service' is set
        if self.api_client.client_side_validation and (
            "service" not in local_var_params
            or local_var_params["service"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `service` when calling `instance_set_state`"
            )  # noqa: E501
        # verify the required parameter 'instance' is set
        if self.api_client.client_side_validation and (
            "instance" not in local_var_params
            or local_var_params["instance"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `instance` when calling `instance_set_state`"
            )  # noqa: E501
        # verify the required parameter 'desired_state' is set
        if self.api_client.client_side_validation and (
            "desired_state" not in local_var_params
            or local_var_params["desired_state"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `desired_state` when calling `instance_set_state`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "service" in local_var_params:
            path_params["service"] = local_var_params["service"]  # noqa: E501
        if "instance" in local_var_params:
            path_params["instance"] = local_var_params["instance"]  # noqa: E501
        if "desired_state" in local_var_params:
            path_params["desired_state"] = local_var_params[
                "desired_state"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/services/{service}/{instance}/state/{desired_state}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_instances(self, service, **kwargs):  # noqa: E501
        """List instances of service_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_instances(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str service: Service name (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.list_instances_with_http_info(service, **kwargs)  # noqa: E501

    def list_instances_with_http_info(self, service, **kwargs):  # noqa: E501
        """List instances of service_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_instances_with_http_info(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str service: Service name (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse2001, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["service"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_instances" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'service' is set
        if self.api_client.client_side_validation and (
            "service" not in local_var_params
            or local_var_params["service"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `service` when calling `list_instances`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "service" in local_var_params:
            path_params["service"] = local_var_params["service"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/services/{service}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse2001",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_services_for_cluster(self, **kwargs):  # noqa: E501
        """List service names and service instance names on the current cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_services_for_cluster(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.list_services_for_cluster_with_http_info(**kwargs)  # noqa: E501

    def list_services_for_cluster_with_http_info(self, **kwargs):  # noqa: E501
        """List service names and service instance names on the current cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_services_for_cluster_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse200, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_services_for_cluster" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/services",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse200",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def status_instance(self, service, instance, **kwargs):  # noqa: E501
        """Get status of service_name.instance_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_instance(service, instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str service: Service name (required)
        :param str instance: Instance name (required)
        :param int verbose: Include verbose status information
        :param bool include_smartstack: Include Smartstack information
        :param bool include_envoy: Include Envoy information
        :param bool include_mesos: Include Mesos information
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.status_instance_with_http_info(
            service, instance, **kwargs
        )  # noqa: E501

    def status_instance_with_http_info(self, service, instance, **kwargs):  # noqa: E501
        """Get status of service_name.instance_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_instance_with_http_info(service, instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str service: Service name (required)
        :param str instance: Instance name (required)
        :param int verbose: Include verbose status information
        :param bool include_smartstack: Include Smartstack information
        :param bool include_envoy: Include Envoy information
        :param bool include_mesos: Include Mesos information
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            "service",
            "instance",
            "verbose",
            "include_smartstack",
            "include_envoy",
            "include_mesos",
        ]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method status_instance" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'service' is set
        if self.api_client.client_side_validation and (
            "service" not in local_var_params
            or local_var_params["service"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `service` when calling `status_instance`"
            )  # noqa: E501
        # verify the required parameter 'instance' is set
        if self.api_client.client_side_validation and (
            "instance" not in local_var_params
            or local_var_params["instance"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `instance` when calling `status_instance`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "service" in local_var_params:
            path_params["service"] = local_var_params["service"]  # noqa: E501
        if "instance" in local_var_params:
            path_params["instance"] = local_var_params["instance"]  # noqa: E501

        query_params = []
        if (
            "verbose" in local_var_params and local_var_params["verbose"] is not None
        ):  # noqa: E501
            query_params.append(("verbose", local_var_params["verbose"]))  # noqa: E501
        if (
            "include_smartstack" in local_var_params
            and local_var_params["include_smartstack"] is not None
        ):  # noqa: E501
            query_params.append(
                ("include_smartstack", local_var_params["include_smartstack"])
            )  # noqa: E501
        if (
            "include_envoy" in local_var_params
            and local_var_params["include_envoy"] is not None
        ):  # noqa: E501
            query_params.append(
                ("include_envoy", local_var_params["include_envoy"])
            )  # noqa: E501
        if (
            "include_mesos" in local_var_params
            and local_var_params["include_mesos"] is not None
        ):  # noqa: E501
            query_params.append(
                ("include_mesos", local_var_params["include_mesos"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/services/{service}/{instance}/status",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def task_instance(self, service, instance, task_id, **kwargs):  # noqa: E501
        """Get mesos task of service_name.instance_name by task_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_instance(service, instance, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str service: Service name (required)
        :param str instance: Instance name (required)
        :param str task_id: mesos task id (required)
        :param bool verbose: Return slave and executor for task
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.task_instance_with_http_info(
            service, instance, task_id, **kwargs
        )  # noqa: E501

    def task_instance_with_http_info(
        self, service, instance, task_id, **kwargs
    ):  # noqa: E501
        """Get mesos task of service_name.instance_name by task_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_instance_with_http_info(service, instance, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str service: Service name (required)
        :param str instance: Instance name (required)
        :param str task_id: mesos task id (required)
        :param bool verbose: Return slave and executor for task
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["service", "instance", "task_id", "verbose"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_instance" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'service' is set
        if self.api_client.client_side_validation and (
            "service" not in local_var_params
            or local_var_params["service"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `service` when calling `task_instance`"
            )  # noqa: E501
        # verify the required parameter 'instance' is set
        if self.api_client.client_side_validation and (
            "instance" not in local_var_params
            or local_var_params["instance"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `instance` when calling `task_instance`"
            )  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and (
            "task_id" not in local_var_params
            or local_var_params["task_id"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `task_id` when calling `task_instance`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "service" in local_var_params:
            path_params["service"] = local_var_params["service"]  # noqa: E501
        if "instance" in local_var_params:
            path_params["instance"] = local_var_params["instance"]  # noqa: E501
        if "task_id" in local_var_params:
            path_params["task_id"] = local_var_params["task_id"]  # noqa: E501

        query_params = []
        if (
            "verbose" in local_var_params and local_var_params["verbose"] is not None
        ):  # noqa: E501
            query_params.append(("verbose", local_var_params["verbose"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/services/{service}/{instance}/tasks/{task_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def tasks_instance(self, service, instance, **kwargs):  # noqa: E501
        """Get mesos tasks of service_name.instance_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_instance(service, instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str service: Service name (required)
        :param str instance: Instance name (required)
        :param str slave_hostname: slave hostname to filter tasks by
        :param bool verbose: Return slave and executor for task
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.tasks_instance_with_http_info(
            service, instance, **kwargs
        )  # noqa: E501

    def tasks_instance_with_http_info(self, service, instance, **kwargs):  # noqa: E501
        """Get mesos tasks of service_name.instance_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_instance_with_http_info(service, instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str service: Service name (required)
        :param str instance: Instance name (required)
        :param str slave_hostname: slave hostname to filter tasks by
        :param bool verbose: Return slave and executor for task
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[object], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["service", "instance", "slave_hostname", "verbose"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
            ]
        )

        for key, val in local_var_params["kwargs"].items():
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_instance" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'service' is set
        if self.api_client.client_side_validation and (
            "service" not in local_var_params
            or local_var_params["service"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `service` when calling `tasks_instance`"
            )  # noqa: E501
        # verify the required parameter 'instance' is set
        if self.api_client.client_side_validation and (
            "instance" not in local_var_params
            or local_var_params["instance"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `instance` when calling `tasks_instance`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "service" in local_var_params:
            path_params["service"] = local_var_params["service"]  # noqa: E501
        if "instance" in local_var_params:
            path_params["instance"] = local_var_params["instance"]  # noqa: E501

        query_params = []
        if (
            "slave_hostname" in local_var_params
            and local_var_params["slave_hostname"] is not None
        ):  # noqa: E501
            query_params.append(
                ("slave_hostname", local_var_params["slave_hostname"])
            )  # noqa: E501
        if (
            "verbose" in local_var_params and local_var_params["verbose"] is not None
        ):  # noqa: E501
            query_params.append(("verbose", local_var_params["verbose"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/services/{service}/{instance}/tasks",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[object]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
